#include <stdio.h>
#include <string.h>

int findChar(char * str, char c)
{
  int i,l;
  l = strlen(str);
    for (i=0;i<l;i = i+1)
       {
       if (str[i] == c)
         return i;
       }  
       
         return -1;           

 }
int replaceChar(char *str, char c1, char c2)
{
    int i;
    int count = 0;
    int l = strlen(str);

    for (i=0; i<l; i = i+1) 
    {
        if (str[i] == c1) 
        {
            str[i] = c2;
            count = count +1;
        }
    return count;
    }
    return 0;
}

int isPalindrome(char *str)
{
	int length;
	int i;
	
	/*calculate length*/
	length = strlen(str);
	 
    for(i=0; i<length; i = i+1)
	{
		if((str[0+i] != str[(length-1)-i]))
		{
			return 0;
			
		}			
	} 	
	return 1;
}

void swap(char *a, char *b)
{
    char c;
    c = *a;                
    *a = *b;
    *b = c;
}
int reverseString(char * str)
{
  int l,i;
  l=strlen(str);
    for (i=0;i<(l/2);i = i +1)
     {
       swap(&str[i],&str[l-i-1]);

     }
  return l;   
}

int removeChar(char * str1, char * str2, char c)
{
  int l;
  char t = '*';
  int i;
 

  l = strlen(str1);
  strcpy(str2,str1);
 

    	for(i = 0; i<l; i++)
	       {
		      if(str2[i] == c)
	      	{
			      str2[i] = t;
	       	}  
	}

 return 1;

}


int main()
{
char arv[10] = "Hello";
char arv1[10];

   
   printf("Find in position %d\n",findChar(arv,'e'));

   replaceChar(arv,'e', 'o');

   printf("%s\n",arv);

  if(isPalindrome(arv))
		printf("%s is a palindrome string\n",arv);
	else
		printf("%s is not a palindrome string\n",arv);

   reverseString(arv);
	 printf("The word reversed is: %s  \n", arv);
   printf("\nthe number of characters in that string: %d\n", reverseString(arv));


   removeChar(arv, arv1, 'l');
   printf("New char:%s\n",arv1);

return 0;


}  
